package io.jpress.model;

import com.jfinal.core.Controller;
import io.jboot.db.annotation.Table;
import io.jboot.utils.StrUtil;
import io.jboot.web.controller.JbootControllerContext;
import io.jpress.model.base.BaseSiteInfo;

import javax.servlet.http.HttpServletRequest;
import java.util.HashSet;
import java.util.Set;

/**
 * Generated by JPress.
 */
@Table(tableName = "site_info", primaryKey = "id")
public class SiteInfo extends BaseSiteInfo<SiteInfo> {

    private static final long serialVersionUID = 1L;
    private Set<String> langArray;


    public boolean hasLang(String lang) {
        for (String s : getBindLangsAsSet()) {
            if (s.equalsIgnoreCase(lang)) {
                return true;
            }
        }
        return false;
    }


    public Set<String> getBindLangsAsSet() {
        if (langArray == null) {
            langArray = toStringSet(getBindLangs());
        }
        return langArray;
    }


    private Set<String> toStringSet(String string) {
        Set<String> set = new HashSet<>();
        if (StrUtil.isNotBlank(string)) {
            String[] strings = string.split(",");
            for (String s : strings) {
                set.add(s.trim());
            }
        }
        return set;
    }


    public String getUrl() {
        String bindDomain = StrUtil.defaultIfBlank(getBindDomain(), "");
        if (StrUtil.isNotBlank(bindDomain)) {
            Controller controller = JbootControllerContext.get();
            HttpServletRequest request = controller.getRequest();
            bindDomain = request.getScheme() + "://" + bindDomain;
        }
        return bindDomain + StrUtil.defaultIfBlank(getBindPath(), "");
    }


    public String getUrl(String scheme) {
        String bindDomain = StrUtil.defaultIfBlank(getBindDomain(), "");
        if (StrUtil.isNotBlank(bindDomain)) {
            bindDomain = scheme + "://" + bindDomain;
        }
        return bindDomain + StrUtil.defaultIfBlank(getBindPath(), "");
    }

    /**
     * 获取真实的域名，排除端口号
     *
     * @return
     */
    public String getRealDomain() {
        String bindDomain = getBindDomain();
        if (bindDomain != null) {
            int indexOf = bindDomain.indexOf(":");
            if (indexOf > 0) {
                return bindDomain.substring(0, indexOf);
            }
        }
        return bindDomain;
    }


    /**
     * 判断当前的 target 路径，是否是当前站点的路径
     *
     * @param target
     * @param request
     * @return
     */
    public boolean isSiteAction(String target, HttpServletRequest request) {
        String bindDomain = getBindDomain();
        String bindPath = getBindPath();

        if (StrUtil.areNotEmpty(bindDomain, bindPath)) {
            if (getRealDomain().equals(request.getServerName()) && target.startsWith(bindPath)) {
                return true;
            }
        }

        if (StrUtil.isNotBlank(bindDomain) && StrUtil.isBlank(bindPath)) {
            if (getRealDomain().equals(request.getServerName())) {
                return true;
            }
        }

        if (StrUtil.isNotBlank(bindPath) && StrUtil.isBlank(bindDomain)) {
            if (target.startsWith(bindPath)) {
                return true;
            }
        }
        return false;
    }
}

