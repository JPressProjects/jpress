package io.jpress.module.route.controller;

import com.jfinal.aop.Inject;
import com.jfinal.core.JFinal;
import io.jboot.utils.StrUtil;
import io.jboot.web.controller.annotation.RequestMapping;
import io.jpress.commons.utils.DateUtils;
import io.jpress.module.article.model.ArticleCategory;
import io.jpress.module.article.service.ArticleCategoryService;
import io.jpress.module.route.model.TRoute;
import io.jpress.module.route.service.TRouteService;
import io.jpress.service.OptionService;
import io.jpress.web.base.TemplateControllerBase;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * 站点 Sitemap
 *
 * @author Eric.Huang
 * @date 2019-03-13 14:11
 * @package io.jpress.web.front
 **/

@RequestMapping("/sitemap")
public class SitemapController extends TemplateControllerBase {

    @Inject
    OptionService optionService;
    @Inject
    TRouteService routeService;
    @Inject
    ArticleCategoryService articleCategoryService;

    private static final String contentType = "text/xml; charset=" + JFinal.me().getConstants().getEncoding();

    static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:ss:mm'Z'");

    public void index() {
        StringBuilder xmlBuilder = new StringBuilder();
        buildSitemapHeader(xmlBuilder);
        String domain = optionService.findByKey("web_domain");
        if (StrUtil.isBlank(domain)) {
            domain = "";
        }

        buildSitemap(xmlBuilder, domain + "/sitemap/site", format.format(new Date()));
        List<ArticleCategory> categories = articleCategoryService.findAll();
        if (categories != null && !categories.isEmpty()) {
            for (ArticleCategory t : categories) {
                buildSitemap(xmlBuilder, domain + "/sitemap/taxonomy/" + t.getId(), format.format(new Date()));
            }
        }
        buildSitemapFooter(xmlBuilder);
        renderText(xmlBuilder.toString(), contentType);
    }

    public void site() {
        StringBuilder xmlBuilder = new StringBuilder();
        buildUrlsetHeader(xmlBuilder);
        buildUrl(xmlBuilder, optionService.findByKey("web_domain"), format.format(new Date()), "always", "1.0");
        buildUrlsetFooter(xmlBuilder);
        renderText(xmlBuilder.toString(), contentType);
    }

    public void taxonomy() {
        Long id = getParaToLong();
        if (id == null) {
            renderText("", contentType);
        }

        StringBuilder xmlBuilder = new StringBuilder();
        buildUrlsetHeader(xmlBuilder);
        String domain = optionService.findByKey("web_domain");
        List<TRoute> routes = routeService.findListByCategoryId(id, true, "created", 500);
        if (routes != null && !routes.isEmpty()) {
            for (TRoute c : routes) {
                if (c.getModified() == null) {
                    continue;
                }

                String changefreq = "daily";
                String priority = "1.0";
                int dayDiff = DateUtils.getDaysBetweenDays(new Date(), c.getModified());
                if (dayDiff > 30) {
                    changefreq = "monthly";
                    priority = "0.3";
                } else if (dayDiff > 7) {
                    changefreq = "weekly";
                    priority = "0.9";
                }

                buildUrl(xmlBuilder, domain + c.getUrl(), format.format(c.getModified()), changefreq, priority);
            }
        }
        buildUrlsetFooter(xmlBuilder);
        renderText(xmlBuilder.toString(), contentType);
    }

    private void buildSitemapHeader(StringBuilder xmlBuilder) {
        buildHeader(xmlBuilder);
        xmlBuilder.append("<sitemapindex ");
        xmlBuilder.append(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ");
        xmlBuilder.append(" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9\" ");
        xmlBuilder.append(" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" ");
        xmlBuilder.append(" > ");
    }

    private void buildSitemapFooter(StringBuilder xmlBuilder) {
        xmlBuilder.append("</sitemapindex>");
        buildFooter(xmlBuilder);
    }

    private void buildUrlsetHeader(StringBuilder xmlBuilder) {
        buildHeader(xmlBuilder);
        xmlBuilder.append("<urlset");
        xmlBuilder.append(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ");
        xmlBuilder.append(" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9\" ");
        xmlBuilder.append(" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" ");
        xmlBuilder.append(" > ");
    }

    private void buildUrlsetFooter(StringBuilder xmlBuilder) {
        xmlBuilder.append("</urlset>");
        buildFooter(xmlBuilder);
    }

    private void buildHeader(StringBuilder xmlBuilder) {
        xmlBuilder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    }

    private void buildFooter(StringBuilder xmlBuilder) {
        xmlBuilder.append("<!-- This sitemap was generated by JPress --> ");
    }

    private void buildSitemap(StringBuilder xmlBuilder, String loc, String lastmod) {
        xmlBuilder.append("<sitemap>");
        xmlBuilder.append("<loc>" + loc + "</loc>");
        xmlBuilder.append("<lastmod>" + lastmod + "</lastmod>");
        xmlBuilder.append("</sitemap>");
    }

    private void buildUrl(StringBuilder xmlBuilder, String loc, String lastmod, String changefreq, String priority) {
        xmlBuilder.append("<url>");
        xmlBuilder.append("<loc>" + loc + "</loc>");
        xmlBuilder.append("<lastmod>" + lastmod + "</lastmod>");
        xmlBuilder.append("<changefreq>" + changefreq + "</changefreq>");
        xmlBuilder.append("<priority>" + priority + "</priority>");
        xmlBuilder.append("</url>");
    }
}
